// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  PLUS
  ADMIN
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]

  WrongQuestion    WrongQuestion[]
  FavoriteQuestion FavoriteQuestion[]
}

model Subject {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String  @unique
  description String?
  image       String?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  exams Exam[]
}

enum ExamStatus {
  PUBLIC
  PRIVATE
  DRAFT
}

model Exam {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  description String?
  status      ExamStatus @default(DRAFT)

  Subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?  @db.ObjectId

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  questions Question[]
}

enum QuestionType {
  MCQ // 单选题
  MRQ // 多选题
  TRUE_FALSE // 判断题
  SHORT_ANSWER // 简答题
}

// 题目模型
model Question {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  question    String
  type        QuestionType
  image       String?
  explanation String?

  answers          Answer[]
  WrongQuestion    WrongQuestion[]
  FavoriteQuestion FavoriteQuestion[]
  Exam             Exam               @relation(fields: [examId], references: [id])
  examId           String             @db.ObjectId
}

model Answer {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  answer    String
  isCorrect Boolean

  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String   @db.ObjectId
}

model WrongQuestion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
}

model FavoriteQuestion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
}
